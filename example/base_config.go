// Code generated by "esc -o base_config.go -pkg main base-config.yaml"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/base-config.yaml": {
		name:    "base-config.yaml",
		local:   "base-config.yaml",
		size:    2335,
		modtime: 1562770645,
		compressed: `
H4sIAAAAAAAC/7RWUW/bNhB+z684NHEbA7GkOgaGCcjaoc3QAcVapHsoEHTMmTpLRChSIU92DM//fZDM
yIriNnvYnmx9PH7fHe/jSRkyZjZPjwBYlTS36DKfwvW3I4DSGsXW7R6PAI7hC6PJ0GX7WMhooYxiZY3v
c4ge3pADfCG3VJI+EGoudhDAwtoU5ugG9EF5QB7Qp9QfVF58RCYj159/Tp5wP4TMvn59WDNYUvqQEpxs
POkF3CizsJHfgX9gSTdbKNADQqHyAmb39+CQCawBMsv08S7GPOwJEryuKIW7mtwaUJPjgLdICrjMTzV6
Fq+Tcpz6ukzZoaSoYK4iR3c1eY4KxT6ar0UDCs/Itd+0Abv/Qmr0Pp0lydkj1GaUzpLXh8Dzsx+lfhaK
T79/ItsIG7La8OkYYvhB4pv/UumXrknBsdEBN0Shy5Gtds9cOPKF1ZmPVuiMMnnXnpK8x5xS+DsAAMfH
N5tNSCFqHLLd3uy7rjywta0VoqNuz2bzl/LCkbRLcuvttluYwJ8W2Nl6rpsULJ+BLEjeAhcEB3SuAwAV
5vTttDlNn8YxVlUUKi7uImnLGKsyDrHxkCbuN+ENmeXF985/DNbBtSNJhqFtoH9OdBf1JiheDLVfNj8X
/QRePp+AtnlP94EQ68jXpdU2V7KVr1WsTEb3UcGlPvYkm/bGntDJIh7NktEsEW3A6Py9XnhpKmlLIbWt
sxWyLEY/vVsV5Gg0TYKGaLIdnb8fTafDQkbTaS++9LnQNhealqR3Gy6vrj5djabTcc8HE/jNOiitI2gq
dSU2KQLObc1ty4cqPTdcO6qsb8y83p9Frrio55FGVly3HkcjFer2PD4G9IkBxj1jxo+N2Vs5Vl60I6nn
15ONWgDdwYvK2ewFnB7s2hi2bxt/uqzm9eTdp6tL8evn3082ZLLtQPmB/5Dsofvyv+gfrP+t1yhvJ1ip
CWp05eS5QY65T3uN/hezvwl7fsCF4DCs9hLGslqsBdaZ4hQWqD11a9rKW8qGaPPatTWLIoWkA73SZGQT
vNnnpYzUdUaiLQrY1dSTFc2lFw3ZwrUvSFNr3a03t1o5Eotaa7FSJrOrYR6GVqKwnkVGGtcpnCfJsKqg
MtzpKKwrw+SWqPuVkJeo2wslurH96tW++m7K788QIAz8FJJo2oOlU6xkyx+dH3XfBpfONV86w0+HfwIA
AP//O55jGR8JAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
