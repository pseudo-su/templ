// Code generated by "esc -o base_config.go -pkg main base-config.yaml"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/base-config.yaml": {
		name:    "base-config.yaml",
		local:   "base-config.yaml",
		size:    2316,
		modtime: 1562773367,
		compressed: `
H4sIAAAAAAAC/7RW32/bNhB+z19xaOI2BmJJdQwME5C1Q5uhA4a1SPdQIOiYM3WWiFCkwh92DM//+0CZ
kRXFbfawPtn6ePy+O97Hkwp0WOgyPwJwoqa5RlPYHK6/HgHUWgmnze7xCOAYPjtUBZpiHwsFLYQSTmhl
+xyshwdygM9kloLTB0Lpqh0EsNA6hzmaAX1UHpBH9Cn1B1FWf6Ajxdeffs6ecD+EzL58eVhTWFP+kBKc
bCzJBdwItdCJ3YF/Yk03W6jQAkIlygpm9/dg0BFoBaSW+eNdDsu4J0q4dUM53Hkya0BJxkW8RXLAZXkq
0Tr2OqvHufV17gxySirnmsTQnSfrkko4m8zXLIDMOnTebtqA3X/GJVqbz7Ls7BGqC8pn2etD4PnZ91I/
i8Xn3z6RbYKBzCt3OoYUvpP45v9U+qVrUnRscsANSexyopvds6sM2UrLwiYrNEqosmtPTdZiSTn8EwGA
4+ObzSamkASHbLc3+64LC07r1grJUbdns/lbWGaI6yWZ9XbbLUzgLw3OaD+XIQXtzoBXxG/BVQQHdK4j
AA2W9PU0nKbN0xSbJokVV3cJ13WKTZ3G2HRIk/ab8IbU8uJb5z8GbeDaECfloG2gfU50F/UmKl4MtV+G
n4t+Ai+fT0Dqsqf7QIg+sb7WUpeCt/JepEIVdJ9UrpbHlnhob2oJDa/S0SwbzTLWBozO38uF5arhumZc
al+s0PFq9NO7VUWGRtMsarCQ7ej8/Wg6HRYymk578bUtmdQlk7QkudtweXX18Wo0nY57PpjAb9pArQ1B
qNTUGFIEnGvv2pYPVXpuuDbUaBvMvN6fRSlc5edt9Y0lX+iJ9U/6Pe75MH3sw97KsbCsnUA9e55sxALo
Dl40Rhcv4PRgk8bbt8GNpvBuPXn38eqS/frp95MNqWI7EH6gP6R66Hb8CPmD1b+1EvntBBsxQYmmnjw3
tbG0ea+r/2HQh7Dnp1kMjpNpL6G0E4s1Q18Il8MCpaVuTWp+S8UQDe9Y7R2rcsg60ApJiofgzT4vobj0
BbG2KHDGU0+WhRvOAtnCtG9D5aXs1sMVFobYwkvJVkIVejXMQ9GKVdo6VpDEdQ7nWTasKqoMdxqK60I5
MkuU/UrIcpTt7WHdjH71al99N9L3ZwgQp3sOWTLtwdwIJ3jLn5wfdR8Cl8aEz5rhd8K/AQAA///+e4+z
DAkAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
